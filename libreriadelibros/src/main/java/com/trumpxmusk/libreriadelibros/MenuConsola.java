package com.trumpxmusk.libreriadelibros;

import java.util.List;
import java.util.Scanner;

import org.springframework.stereotype.Component;

import com.trumpxmusk.libreriadelibros.model.Book;
import com.trumpxmusk.libreriadelibros.model.Person;
import com.trumpxmusk.libreriadelibros.service.BookService;

import lombok.RequiredArgsConstructor;

@Component
@RequiredArgsConstructor
public class MenuConsola {
    private final Scanner scanner = new Scanner(System.in);
    private boolean ejecutando = true;
    
    private final BookService bookService;

    public void iniciar() {
        while (ejecutando) {
            mostrarMenu();
            procesarOpcion(obtenerOpcion());
        }
    }

    private void mostrarMenu() {
        System.out.println("""
                Digite una opci√≥n
                1. Buscar libros por titulo
                2. Listar libros registrados
                3. Listar autores registrados
                4. Listar autores vivos en un determinado a√±o
                5. Listar libros por idioma
                0. Salir 
                """);
        System.out.print("\nSeleccione una opci√≥n: ");
    }

    private int obtenerOpcion() {
        try {
            return Integer.parseInt(scanner.nextLine().trim());
        } catch (NumberFormatException e) {
            return -1;
        }
    }

    private void procesarOpcion(int opcion) {
        switch (opcion) {
            case 0:
                salir();
                break;
            case 1:
                System.out.print("\nIngrese el t√≠tulo del libro a buscar: ");
                String titulo = scanner.nextLine().trim();
                String formatTitulo = titulo.replace(" ", "%20");
                System.out.println(bookService.searchAndSaveBook(formatTitulo));
                break;
            case 2:
                listarLibrosRegistrados();
                break;
            case 3:
                listarAutoresRegistrados();
                break;
            case 4:
                listarAutoresVivos();
                break;
            case 5:
                listarLibrosPorIdioma();
                break;
            default:
                System.out.println("\nOpci√≥n no v√°lida. Por favor, intente nuevamente.");
        }
    }

    private void listarLibrosRegistrados() {
        List<Book> libros = bookService.listarTodosLosLibros();
        if (libros.isEmpty()) {
            System.out.println("\nNo hay libros registrados en la base de datos.");
            return;
        }
        System.out.println("\nLibros registrados:");
        for (Book libro : libros) {
            System.out.println(libro);
        }
    }

    private void listarAutoresRegistrados() {
        List<Person> autores = bookService.listarTodosLosAutores();
        if (autores.isEmpty()) {
            System.out.println("\nNo hay autores registrados en la base de datos.");
            return;
        }
        System.out.println("\nAutores registrados:");
        for (Person autor : autores) {
            System.out.println(autor);
        }
    }

    private void listarAutoresVivos() {
        System.out.print("\nIngrese el a√±o para ver autores vivos: ");
        try {
            int a√±o = Integer.parseInt(scanner.nextLine().trim());
            List<Person> autores = bookService.listarAutoresVivosEnA√±o(a√±o);
            if (autores.isEmpty()) {
                System.out.println("\nNo se encontraron autores vivos en el a√±o " + a√±o);
                return;
            }
            System.out.println("\nAutores vivos en el a√±o " + a√±o + ":");
            for (Person autor : autores) {
                System.out.println(autor);
            }
        } catch (NumberFormatException e) {
            System.out.println("\nPor favor, ingrese un a√±o v√°lido.");
        }
    }

    private void listarLibrosPorIdioma() {
        mostrarMenuIdiomas();
        int opcion = obtenerOpcion();
        String codigoIdioma = obtenerCodigoIdioma(opcion);
        
        if (codigoIdioma == null) {
            System.out.println("\nOpci√≥n de idioma no v√°lida. Por favor, intente nuevamente.");
            return;
        }

        List<Book> libros = bookService.listarLibrosPorIdioma(codigoIdioma);
        if (libros.isEmpty()) {
            System.out.println("\nNo se encontraron libros en el idioma seleccionado.");
            return;
        }
        System.out.println("\nLibros en idioma '" + obtenerNombreIdioma(codigoIdioma) + "':");
        for (Book libro : libros) {
            System.out.println(libro);
        }
    }

    private void mostrarMenuIdiomas() {
        System.out.println("""
                \nSeleccione un idioma:
                1. Espa√±ol (es)
                2. Ingl√©s (en)
                3. Franc√©s (fr)
                4. Portugu√©s (pt)
                """);
        System.out.print("\nSeleccione una opci√≥n: ");
    }

    private String obtenerCodigoIdioma(int opcion) {
        return switch (opcion) {
            case 1 -> "es";
            case 2 -> "en";
            case 3 -> "fr";
            case 4 -> "pt";
            default -> "es";
        };
    }

    private String obtenerNombreIdioma(String codigo) {
        return switch (codigo) {
            case "es" -> "Espa√±ol";
            case "en" -> "Ingl√©s";
            case "fr" -> "Franc√©s";
            case "de" -> "Alem√°n";
            case "it" -> "Italiano";
            case "pt" -> "Portugu√©s";
            default -> codigo;
        };
    }

    private void salir() {
        System.out.println("\nüëã ¬°Gracias por usar la aplicaci√≥n!");
        ejecutando = false;
    }

    public void cerrar() {
        scanner.close();
    }
} 